caballo es int que representa el id del caballo, raza es string
vigor y horas es int. gana es un bool (TRUE = Ganó , FALSE = Perdió)
(SIEMPRE ACLARAR ESTO EN LOS TAD)

TAD centroEcu {
    obs caballos : conj<caballo>
    obs razas: dict<caballo,raza>
    obs puntos: dict<caballo,vigor>

    proc nuevoCentro(): centroEcu
        requiere {}
        asegura { res.caballos = {} }
        asegura { res.razas = {} }
        asegura { res.puntos = {} }


    proc comprarCaballo(inout c: centroEcu, in cab: caballo, in r: raza, in v:vigor)
        requiere { v >= 0 }
        requiere { !(cab in c.caballos) && !(cab in c.razas) && !(cab in c.puntos) }
        asegura  { c.caballos = old(c).caballos + {cab} }
        asegura  { c.razas = setKey(old(c).razas, cab ,r) }
        asegura  { c.puntos = setKey(old(c).puntos, cab ,v) }


    proc entrenarCaballo(inout c: centroEcu, in cab: caballo, in hs: horas)
        requiere { cab in c.caballos }
        asegura  { c.caballos = old(c).caballos }
        asegura  { c.razas = old(c).razas }
        asegura  { c.puntos = setKey(old(c).puntos, cab, old(c).puntos[cab] + hs) }


    proc competirCaballo(inout c: centroEcu, in cab: caballo, in gana: bool)
        requiere { cab in c.caballos }
        asegura  { c.caballos = old(c).caballos }
        asegura  { c.razas = old(c).razas}
        asegura  { gana  => c.puntos = setKey(old(c).puntos , cab, old(c).puntos[cab] + 10) }
        asegura  { !gana => c.puntos = setKey(old(c).puntos , cab, old(c).puntos[cab] - 10) }


    proc verPuntos(in c: centroEcu, in cab:caballo, out res: int)
        requiere { cab in c.caballos }
        asegura  { res = c.puntos[cab]}   


    proc verMejorDeRaza (in c: centroEcu, in r:raza, out res: caballo) 
        requiere { exists cab:caballo :: cab in c.caballos &&L c.razas[cab] = r}
        asegura  { exists c1:caballo :: c1 in c.caballos &&L (forall c2:caballo :: 
                     c2 in caballos &&L (c.razas[c1] = c.razas[c2] = r) =>L
                    (c.puntos[c1] >= c.puntos[c2]) && res = c1)  }
        

}

// Duda: Dice que quiere ver el mejor caballo de "cada raza". Eso significa que recibe la raza? . 
// En general considero que cada proc hace referencia a un solo objeto? 
// Por ejemplo a un solo caballo? O puede pasar que me pidan devolver un dict<raza,caballo>
// Lo mismo con verPuntosDeVigor . Muestro un dict con los puntos de vigor de todos los caballos o de un caballo especifico?
Respuesta: Si, siempre que se pueda, que el proc se refiera a un solo objeto, a menos que el enunciado pida explicitamente devolver un conjunto


// Duda: Es recomendable guardar todos los caballos en un conj<caballo>? Lo mismo con TAD Planta, guardar todas las especies de planta?
Respuesta: Es cómodo, pero no es imprescindible. Si en el constructor defino bien que las keys sean las mismas en todos los dict que corresponda, puedo elegir usar solo ese dict para ver que el caballo esté ahi dentro, y ahorrarme algunas lineas de código (Yo por comodidad seguiré usando ese conjunto)

// Duda: Se puede usar if then como usé en competirCaballo ?
Respuesta: No es recomendable. La forma correcta de usar if then else es que devuelva un valor y eso se hace medio complejo.
Mejor usar dos asegura distintos, con un => cada uno como usé en competirCaballo
